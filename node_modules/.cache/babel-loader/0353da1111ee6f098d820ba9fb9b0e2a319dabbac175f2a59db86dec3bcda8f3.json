{"ast":null,"code":"/**\r\n * Utility functions for localStorage operations\r\n */\n\nexport const getFromStorage = key => {\n  try {\n    const item = localStorage.getItem(key);\n    return item ? JSON.parse(item) : null;\n  } catch (error) {\n    console.error(`Error reading from localStorage (${key}):`, error);\n    return null;\n  }\n};\nexport const saveToStorage = (key, value) => {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n    return true;\n  } catch (error) {\n    console.error(`Error saving to localStorage (${key}):`, error);\n    return false;\n  }\n};\nexport const removeFromStorage = key => {\n  try {\n    localStorage.removeItem(key);\n    return true;\n  } catch (error) {\n    console.error(`Error removing from localStorage (${key}):`, error);\n    return false;\n  }\n};\nexport const clearStorage = () => {\n  try {\n    localStorage.clear();\n    return true;\n  } catch (error) {\n    console.error('Error clearing localStorage:', error);\n    return false;\n  }\n};\n\n// Storage keys constants\nexport const STORAGE_KEYS = {\n  USER: 'taskTracker_user',\n  TASKS: 'taskTracker_tasks',\n  PREFERENCES: 'taskTracker_preferences'\n};","map":{"version":3,"names":["getFromStorage","key","item","localStorage","getItem","JSON","parse","error","console","saveToStorage","value","setItem","stringify","removeFromStorage","removeItem","clearStorage","clear","STORAGE_KEYS","USER","TASKS","PREFERENCES"],"sources":["C:/Users/Lenovo/Desktop/Frontend Developer/task-tracker/src/utils/localStorage.js"],"sourcesContent":["/**\r\n * Utility functions for localStorage operations\r\n */\r\n\r\nexport const getFromStorage = (key) => {\r\n    try {\r\n        const item = localStorage.getItem(key);\r\n        return item ? JSON.parse(item) : null;\r\n    } catch (error) {\r\n        console.error(`Error reading from localStorage (${key}):`, error);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const saveToStorage = (key, value) => {\r\n    try {\r\n        localStorage.setItem(key, JSON.stringify(value));\r\n        return true;\r\n    } catch (error) {\r\n        console.error(`Error saving to localStorage (${key}):`, error);\r\n        return false;\r\n    }\r\n};\r\n\r\nexport const removeFromStorage = (key) => {\r\n    try {\r\n        localStorage.removeItem(key);\r\n        return true;\r\n    } catch (error) {\r\n        console.error(`Error removing from localStorage (${key}):`, error);\r\n        return false;\r\n    }\r\n};\r\n\r\nexport const clearStorage = () => {\r\n    try {\r\n        localStorage.clear();\r\n        return true;\r\n    } catch (error) {\r\n        console.error('Error clearing localStorage:', error);\r\n        return false;\r\n    }\r\n};\r\n\r\n// Storage keys constants\r\nexport const STORAGE_KEYS = {\r\n    USER: 'taskTracker_user',\r\n    TASKS: 'taskTracker_tasks',\r\n    PREFERENCES: 'taskTracker_preferences'\r\n};"],"mappings":"AAAA;AACA;AACA;;AAEA,OAAO,MAAMA,cAAc,GAAIC,GAAG,IAAK;EACnC,IAAI;IACA,MAAMC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAACH,GAAG,CAAC;IACtC,OAAOC,IAAI,GAAGG,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC,GAAG,IAAI;EACzC,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,oCAAoCN,GAAG,IAAI,EAAEM,KAAK,CAAC;IACjE,OAAO,IAAI;EACf;AACJ,CAAC;AAED,OAAO,MAAME,aAAa,GAAGA,CAACR,GAAG,EAAES,KAAK,KAAK;EACzC,IAAI;IACAP,YAAY,CAACQ,OAAO,CAACV,GAAG,EAAEI,IAAI,CAACO,SAAS,CAACF,KAAK,CAAC,CAAC;IAChD,OAAO,IAAI;EACf,CAAC,CAAC,OAAOH,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,iCAAiCN,GAAG,IAAI,EAAEM,KAAK,CAAC;IAC9D,OAAO,KAAK;EAChB;AACJ,CAAC;AAED,OAAO,MAAMM,iBAAiB,GAAIZ,GAAG,IAAK;EACtC,IAAI;IACAE,YAAY,CAACW,UAAU,CAACb,GAAG,CAAC;IAC5B,OAAO,IAAI;EACf,CAAC,CAAC,OAAOM,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,qCAAqCN,GAAG,IAAI,EAAEM,KAAK,CAAC;IAClE,OAAO,KAAK;EAChB;AACJ,CAAC;AAED,OAAO,MAAMQ,YAAY,GAAGA,CAAA,KAAM;EAC9B,IAAI;IACAZ,YAAY,CAACa,KAAK,CAAC,CAAC;IACpB,OAAO,IAAI;EACf,CAAC,CAAC,OAAOT,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO,KAAK;EAChB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMU,YAAY,GAAG;EACxBC,IAAI,EAAE,kBAAkB;EACxBC,KAAK,EAAE,mBAAmB;EAC1BC,WAAW,EAAE;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}