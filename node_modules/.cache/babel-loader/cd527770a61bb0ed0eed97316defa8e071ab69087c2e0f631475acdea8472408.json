{"ast":null,"code":"/**\r\n * Utility functions for localStorage operations\r\n */export const getFromStorage=key=>{try{const item=localStorage.getItem(key);return item?JSON.parse(item):null;}catch(error){console.error(`Error reading from localStorage (${key}):`,error);return null;}};export const saveToStorage=(key,value)=>{try{localStorage.setItem(key,JSON.stringify(value));return true;}catch(error){console.error(`Error saving to localStorage (${key}):`,error);return false;}};export const removeFromStorage=key=>{try{localStorage.removeItem(key);return true;}catch(error){console.error(`Error removing from localStorage (${key}):`,error);return false;}};export const clearStorage=()=>{try{localStorage.clear();return true;}catch(error){console.error('Error clearing localStorage:',error);return false;}};// Storage keys constants\nexport const STORAGE_KEYS={USER:'taskTracker_user',TASKS:'taskTracker_tasks',PREFERENCES:'taskTracker_preferences'};","map":{"version":3,"names":["getFromStorage","key","item","localStorage","getItem","JSON","parse","error","console","saveToStorage","value","setItem","stringify","removeFromStorage","removeItem","clearStorage","clear","STORAGE_KEYS","USER","TASKS","PREFERENCES"],"sources":["C:/Users/Lenovo/Desktop/Frontend Developer/task-tracker/src/utils/localStorage.js"],"sourcesContent":["/**\r\n * Utility functions for localStorage operations\r\n */\r\n\r\nexport const getFromStorage = (key) => {\r\n    try {\r\n        const item = localStorage.getItem(key);\r\n        return item ? JSON.parse(item) : null;\r\n    } catch (error) {\r\n        console.error(`Error reading from localStorage (${key}):`, error);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const saveToStorage = (key, value) => {\r\n    try {\r\n        localStorage.setItem(key, JSON.stringify(value));\r\n        return true;\r\n    } catch (error) {\r\n        console.error(`Error saving to localStorage (${key}):`, error);\r\n        return false;\r\n    }\r\n};\r\n\r\nexport const removeFromStorage = (key) => {\r\n    try {\r\n        localStorage.removeItem(key);\r\n        return true;\r\n    } catch (error) {\r\n        console.error(`Error removing from localStorage (${key}):`, error);\r\n        return false;\r\n    }\r\n};\r\n\r\nexport const clearStorage = () => {\r\n    try {\r\n        localStorage.clear();\r\n        return true;\r\n    } catch (error) {\r\n        console.error('Error clearing localStorage:', error);\r\n        return false;\r\n    }\r\n};\r\n\r\n// Storage keys constants\r\nexport const STORAGE_KEYS = {\r\n    USER: 'taskTracker_user',\r\n    TASKS: 'taskTracker_tasks',\r\n    PREFERENCES: 'taskTracker_preferences'\r\n};"],"mappings":"AAAA;AACA;AACA,GAEA,MAAO,MAAM,CAAAA,cAAc,CAAIC,GAAG,EAAK,CACnC,GAAI,CACA,KAAM,CAAAC,IAAI,CAAGC,YAAY,CAACC,OAAO,CAACH,GAAG,CAAC,CACtC,MAAO,CAAAC,IAAI,CAAGG,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC,CAAG,IAAI,CACzC,CAAE,MAAOK,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,oCAAoCN,GAAG,IAAI,CAAEM,KAAK,CAAC,CACjE,MAAO,KAAI,CACf,CACJ,CAAC,CAED,MAAO,MAAM,CAAAE,aAAa,CAAGA,CAACR,GAAG,CAAES,KAAK,GAAK,CACzC,GAAI,CACAP,YAAY,CAACQ,OAAO,CAACV,GAAG,CAAEI,IAAI,CAACO,SAAS,CAACF,KAAK,CAAC,CAAC,CAChD,MAAO,KAAI,CACf,CAAE,MAAOH,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,iCAAiCN,GAAG,IAAI,CAAEM,KAAK,CAAC,CAC9D,MAAO,MAAK,CAChB,CACJ,CAAC,CAED,MAAO,MAAM,CAAAM,iBAAiB,CAAIZ,GAAG,EAAK,CACtC,GAAI,CACAE,YAAY,CAACW,UAAU,CAACb,GAAG,CAAC,CAC5B,MAAO,KAAI,CACf,CAAE,MAAOM,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,qCAAqCN,GAAG,IAAI,CAAEM,KAAK,CAAC,CAClE,MAAO,MAAK,CAChB,CACJ,CAAC,CAED,MAAO,MAAM,CAAAQ,YAAY,CAAGA,CAAA,GAAM,CAC9B,GAAI,CACAZ,YAAY,CAACa,KAAK,CAAC,CAAC,CACpB,MAAO,KAAI,CACf,CAAE,MAAOT,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpD,MAAO,MAAK,CAChB,CACJ,CAAC,CAED;AACA,MAAO,MAAM,CAAAU,YAAY,CAAG,CACxBC,IAAI,CAAE,kBAAkB,CACxBC,KAAK,CAAE,mBAAmB,CAC1BC,WAAW,CAAE,yBACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}